name: 'Build and Release SQLCipher Tool'

on:
  push:
    branches: [ main, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      # Setup Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Setup MSVC on Windows
      - name: Setup MSVC on Windows
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Install OpenSSL via vcpkg on Windows
      - name: Install OpenSSL via vcpkg (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Clone and setup vcpkg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          cd C:\vcpkg
          .\bootstrap-vcpkg.bat
          
          # Install OpenSSL static library
          .\vcpkg install openssl:x64-windows-static
          
          # Verify installation
          ls "C:\vcpkg\installed\x64-windows-static\include\openssl"
          ls "C:\vcpkg\installed\x64-windows-static\lib"

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.target }}

      # Windows-specific environment setup for SQLCipher
      - name: Setup Windows SQLCipher environment
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Set OpenSSL directory to vcpkg installation
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows-static" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=C:\vcpkg\installed\x64-windows-static\lib" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=C:\vcpkg\installed\x64-windows-static\include" >> $env:GITHUB_ENV
          
          # SQLCipher bundling flags
          echo "LIBSQLITE3_SYS_USE_PKG_CONFIG=0" >> $env:GITHUB_ENV
          echo "SQLCIPHER_BUNDLED=1" >> $env:GITHUB_ENV
          echo "LIBSQLITE3_SYS_BUNDLED_SQLCIPHER=1" >> $env:GITHUB_ENV
          
          # OpenSSL flags - use static linking
          echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV

      # macOS/Linux environment setup
      - name: Setup Unix SQLCipher environment
        if: matrix.platform != 'windows-latest'
        run: |
          echo "LIBSQLITE3_SYS_USE_PKG_CONFIG=0" >> $GITHUB_ENV
          echo "SQLCIPHER_BUNDLED=1" >> $GITHUB_ENV
          echo "LIBSQLITE3_SYS_BUNDLED_SQLCIPHER=1" >> $GITHUB_ENV
          echo "OPENSSL_VENDORED=1" >> $GITHUB_ENV

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Build the frontend
      - name: Build frontend
        run: npm run build

      # Build and release using Tauri Action
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # SQLCipher environment variables
          LIBSQLITE3_SYS_USE_PKG_CONFIG: 0
          SQLCIPHER_BUNDLED: 1
          LIBSQLITE3_SYS_BUNDLED_SQLCIPHER: 1
          # OpenSSL environment variables - conditional for Windows vs others
          OPENSSL_DIR: ${{ matrix.platform == 'windows-latest' && 'C:\vcpkg\installed\x64-windows-static' || '' }}
          OPENSSL_LIB_DIR: ${{ matrix.platform == 'windows-latest' && 'C:\vcpkg\installed\x64-windows-static\lib' || '' }}
          OPENSSL_INCLUDE_DIR: ${{ matrix.platform == 'windows-latest' && 'C:\vcpkg\installed\x64-windows-static\include' || '' }}
          OPENSSL_STATIC: ${{ matrix.platform == 'windows-latest' && '1' || '0' }}
          OPENSSL_VENDORED: ${{ matrix.platform != 'windows-latest' && '1' || '0' }}
          OPENSSL_NO_VENDOR: ${{ matrix.platform == 'windows-latest' && '1' || '0' }}
        with:
          tagName: 'sqlcipher-tool-v__VERSION__'
          releaseName: 'SQLCipher Tool v__VERSION__'
          releaseBody: |
            ## SQLCipher Database Schema Comparison Tool v__VERSION__
            
            ### Features:
            - Compare SQLCipher database schemas
            - Cross-platform support (Windows, macOS, Linux)
            - Built with Tauri + Vue.js
            
            ### Download:
            - **Windows**: Download the `.msi` installer or `.exe` portable
            - **macOS**: Download the `.dmg` file
            - **Linux**: Download the `.AppImage` or `.deb` package
            
            ### Installation:
            See the assets below to download and install this version.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
