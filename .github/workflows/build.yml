name: 'Build and Release SQLCipher Tool'

on:
  push:
    branches: [ main, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup-3.0-dev \
            pkg-config \
            libssl-dev

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      # Setup Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Setup MSVC on Windows
      - name: Setup MSVC on Windows
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Install Windows build tools
      - name: Install Windows build tools
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Install required tools for vendored OpenSSL compilation
          choco install nasm strawberryperl -y
          
          # Set environment variables for OpenSSL compilation
          echo "OPENSSL_NO_VENDOR=0" >> $env:GITHUB_ENV
          echo "PERL=strawberry-perl" >> $env:GITHUB_ENV

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.target }}

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Build the frontend
      - name: Build frontend
        run: npm run build

      # Build and release using Tauri Action
      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Force vendored OpenSSL
          OPENSSL_NO_VENDOR: 0
        with:
          tagName: 'sqlcipher-tool-v__VERSION__'
          releaseName: 'SQLCipher Tool v__VERSION__'
          releaseBody: |
            ## SQLCipher Database Schema Comparison Tool v__VERSION__
            
            ### Features:
            - Compare SQLCipher database schemas
            - Cross-platform support (Windows, macOS, Linux)
            - Built with Tauri + Vue.js
            
            ### Download:
            - **Windows**: Download the `.msi` installer or `.exe` portable
            - **macOS**: Download the `.dmg` file
            - **Linux**: Download the `.AppImage` or `.deb` package
            
            ### Installation:
            See the assets below to download and install this version.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
