name: 'Build and Release SQLCipher Tool'

on:
  push:
    branches: [ main, release ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            target: 'universal-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      # Setup Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Setup MSVC on Windows
      - name: Setup MSVC on Windows
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Install Windows dependencies with OpenSSL
      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Install OpenSSL via chocolatey
          choco install openssl -y
          
          # Find OpenSSL installation path
          $opensslPath = Get-ChildItem "C:\Program Files\OpenSSL*" | Select-Object -First 1 -ExpandProperty FullName
          Write-Host "Found OpenSSL at: $opensslPath"
          
          # Set environment variables
          echo "OPENSSL_DIR=$opensslPath" >> $env:GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$opensslPath\lib\VC\x64\MT" >> $env:GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$opensslPath\include" >> $env:GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $env:GITHUB_ENV
          echo "OPENSSL_NO_VENDOR=1" >> $env:GITHUB_ENV
          
          # SQLCipher flags
          echo "LIBSQLITE3_SYS_USE_PKG_CONFIG=0" >> $env:GITHUB_ENV
          echo "SQLCIPHER_BUNDLED=1" >> $env:GITHUB_ENV
          echo "LIBSQLITE3_SYS_BUNDLED_SQLCIPHER=1" >> $env:GITHUB_ENV

      # Create Cargo config for Windows with proper library paths
      - name: Create Cargo config for Windows
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          # Find Windows SDK lib path
          $sdkPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\Lib\" -Directory | Sort-Object Name -Descending | Select-Object -First 1 -ExpandProperty FullName
          Write-Host "Found Windows SDK at: $sdkPath"
          
          # Escape backslashes for TOML
          $sdkPathEscaped = $sdkPath.Replace('\', '\\')
          
          # Create .cargo directory
          New-Item -ItemType Directory -Force -Path ".cargo"
          
          # Create config.toml with properly escaped paths
          $configContent = @"
          [target.x86_64-pc-windows-msvc]
          rustflags = [
            "-L", "$sdkPathEscaped\\um\\x64",
            "-L", "$sdkPathEscaped\\ucrt\\x64",
          ]
          "@
          
          Set-Content -Path ".cargo\config.toml" -Value $configContent
          Write-Host "Created .cargo/config.toml:"
          Get-Content ".cargo\config.toml"

      # Rust cache
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform }}-${{ matrix.target }}

      # macOS/Linux environment setup
      - na
